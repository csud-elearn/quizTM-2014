import stdlib

class QuestionAbstract: #Classe mère de toutes les questions, non destinée à avoir des instances
    def __init__(self, parent, text, line):
        self.line = line #Numéro de ligne dans la textarea qui correspond à la question
        self.parent = parent #Référence de l'objet Parse pour pouvoir appeler les méthodes de celui-ci
        text = self.parent.converter.makeHtml(text) #Enoncé de la question en markdown
        self.text = text.replace('<pre>', '<pre class="prettyprint">') # Ajout de la classe pour prettify.js
        #Associaton des différents tags au méthodes de la classe
        self.tags_list = {
            "+" : {"function" : self.add_comment, "markdown" : True},
            "." : {"function" : self.add_points, "markdown" : False},
        }
        self.comment = "" #Commentaire affiché lors de la correction
        self.points = 1

    def add_attribute(self, tag, content): #Décide l'action à éxecuter avec un attribut selon le tag
        if self.tags_list[tag]:
            if self.tags_list[tag]["markdown"]:
                # Conversion du markdown pour les attributs qui en ont besoin
                content = self.parent.converter.makeHtml(content)
                content = content.replace('<pre>', '<pre class="prettyprint">')

            JS("self.tags_list[tag]['function'].call(self, content)") #Exécute la méthode associé au tag
        else:
            self.parent.error("Balise invalide pour ce type de question") #Si le tag n'est pas supporté par la question

    def add_comment(self, content):
        self.comment += content

    def add_points(self, n_points):
        i_comma = n_points.find(",")
        if i_comma >= 0:
            n_points = n_points[:i_comma] + "." + n_points[i_comma+1:]


        self.points = float(n_points)

        if not self.points:
            self.parent.error("La valeur en points doit être un nombre décimal")


    def properties(self):
        #Retourne les propriétés communes à tous types de question pour la construction du json
        properties = {
            "text" : self.text,
            "comment" : self.comment,
            "points" : self.points,
        }

        return properties

    def render(self):
        pass

class SimpleQuestion(QuestionAbstract): #Question simple avec un champ de texte classique pour entrer la réponse
    def __init__(self, parent, text, line):
        QuestionAbstract.__init__(self, parent, text, line)
        self.answers = [] #Listes des solutions
        self.regex_answers = [] # Liste des solutions contenant des expressions régulières

        #Associaton des différents tags au méthodes de la classe
        self.tags_list["="] = {"function" : self.add_answer, "markdown" : False}
        self.tags_list["=r"] = {"function" : self.add_regex_answer, "markdown" : False}

    def add_answer(self, content):
        self.answers.append(content)

    def add_regex_answer(self, content):
        if "//" in content:
            answer_dict = {
                "text" : self.parent.converter.makeHtml(content.split("//")[0].clean()),
                "regex" : content.split("//")[1].clean(),
            }

            if not answer_dict["text"]:
                self.parent.error("Texte à afficher vide")
            if not answer_dict["regex"]:
                self.parent.error("Expression régulière vide")

            self.regex_answers.append(answer_dict)
        else:
            self.parent.error("Le texte à afficher doit être séparé de l'expression régulière par un <code>//</code>")

    def render(self): #Aperçu du rendu final de la question
        id_input = self.parent.get_id()
        $container = $("<li>", {"class" : "q-container list-group-item"}).appendTo(self.parent.$render)
        $("<label>", {"for" : id_input, "class" : "markdown-body"}).append(self.text).appendTo($container)
        $("<input>", {"type" : "text", "id" : id_input, "class" : "form-control markdown-body"}).appendTo($container)

    def properties(self): #Renvoie les caractéristiques de la question pour la construction du json
        properties = QuestionAbstract.properties(self)
        properties["type"] = 0
        properties["answers"] = self.answers
        properties["regex_answers"] = self.regex_answers

        return properties

    def check_question(self): #Recherche la présence d'erreurs dans la question
        if len(self.answers) < 1 and len(self.regex_answers) < 1:
            self.parent.error("Cette question doit comporter au moins une réponse", self.line)

class QCM_Checkbox(QuestionAbstract):
    def __init__(self, parent, text, line):
        QuestionAbstract.__init__(self, parent, text, line)
        self.has_answer = False
        self.options = []
        self.input_type = "checkbox" #Indique le type de <input>

        #Associaton des différents tags au méthodes de la classe
        self.tags_list["*"] = {"function" : self.add_option, "markdown" : True}
        self.tags_list["="] = {"function" : self.add_answer, "markdown" : True}

    def add_option(self, content):
        self.options.append({"content" : content, "valid" : False})

    def add_answer(self, content):
        self.has_answer = True
        self.options.append({"content" : content, "valid" : True})

    def render(self):
        $container = $("<li>", {"class" : "q-container list-group-item"}).appendTo(self.parent.$render)
        $("<div>", {"class" : "markdown-body"}).append(self.text).appendTo($container)
        name = self.parent.get_name()
        for option in self.options:
            id_option = self.parent.get_id() #Génération d'un id unique pour lier le label à la case à cocher
            $("<input>", {"type" : self.input_type, "id" : id_option, "name" : name}).appendTo($container)
            $("<label>", {"for": id_option, "class" : "markdown-body"}).append(option.content).appendTo($container)
            $("<br />").appendTo($container)

    def properties(self): #Renvoie les caractéristiques de la question pour la construction du json
        properties = QuestionAbstract.properties(self)
        properties["type"] = 1
        properties["options"] = self.options

        return properties

    def check_question(self): #Recherche la présence d'erreurs dans la question
        if len(self.options) < 2:
            self.parent.error("Cette question doit comporter au moins deux options", self.line)
        elif not self.has_answer:
            self.parent.error("Cette question doit comporter au moins une option correcte", self.line)

class QCM_Radio(QCM_Checkbox):
    def __init__(self, parent, text, line):
        QCM_Checkbox.__init__(self, parent, text, line)
        self.input_type = "radio" #Indique le type de <input>

    def add_answer(self, content):

        if self.has_answer:
            self.parent.error("Ce type de question ne peut comporter qu'une seule réponse valide")
        else:
            self.options.append({"content" : content, "valid" : True})
            self.has_answer = True

    def properties(self): #Renvoie les caractéristiques de la question pour la construction du json
        properties = QCM_Checkbox.properties(self)
        properties["type"] = 2

        return properties

class Parse:
    def __init__(self, text):
        self.questions = [] #Listes contenant les objets questions du quiz
        self.errors = [] #Pour chaque erreur, contient la ligne et le message d'erreur
        self.id = 0 #id unique utilisé pour le rendu
        self.name = 0 #name unique utilisé pour le rendu
        self.number = 0 #Numéro de question
        self.question_parent = None #Référence vers le dernier objet question instancié
        self.l = 0
        self.converter = JS("new Showdown.converter();")

        self.read(text)

    def read(self, texte):

        l_blocks = texte.split("\n{")

        block_1 = l_blocks[0]
        if block_1[0] == "{":
            l_blocks[0] = block_1[1:]

        for block in l_blocks:
            i_closing_tag = block.find("}")

            if i_closing_tag == -1:
                self.error("Balise manquante ou incomplète")
            else:
                tag = block[:i_closing_tag]
                content = block[i_closing_tag+1:].clean()

                if content:
                    question = self.new_question(tag, content)
                    if question:
                        self.question_parent = question
                        self.questions.append(question)
                    else:
                        self.new_attribute(tag, content)

                else:
                    self.error("Texte vide")

            self.l += 1
            self.l += block.count("\n")

        for question in self.questions:
            question.check_question()

    def new_question(self, tag, content):
        questions_types = {
            "??" : SimpleQuestion,
            "++" : QCM_Checkbox,
            "**" : QCM_Radio,
        }

        if questions_types[tag]:
            #Instanciation de la question avec le constructeur associé au tag
            question = JS("new questions_types[tag](self, content, self.l)") #Utilisation de JS() pour écrire du JS pur. Sans cela, RS n'ajoute pas "new"

            return question

        else:
            return False

    def new_attribute(self, tag, content):
        if self.question_parent: #On s'assure qu'il y a une question parente valide.
            if content:
                self.question_parent.add_attribute(tag, content)
            else:
                self.error("La valeur de l'attribut est introuvable")
        else:
            self.error("Une nouvelle question doit être créée avant de définir un attribut")

    def render(self): #Aperçu du quiz
        if len(self.questions) > 0:
            $(".viewbox").css("display", "block")

            self.$render = $("#view_form")
            self.$render.empty()

            for question in self.questions:
                question.render()

        else:
            $(".viewbox").css("display", "none")

        self.show_errors()

    def error(self, message, line=self.l): #Permet de signaler une erreur
        self.errors.append({"line" : line+1, "message" : message})

    def show_errors(self): #Affiche les différentes erreurs signalées dans le format texte
        self.errors.sort(sort_by_line)
        if len(self.errors) > 0:
            $(".errorsbox").removeClass("panel-default content-hidden disabled").addClass("panel-danger")

            $errors_div = $("#errors-div")
            $errors_div.empty()

            for error in self.errors:
                $container = $("<div>", {"class" : "error-container"}).appendTo($errors_div)
                $("<div>", {"class" : "error-line"}).append("Ligne " + error.line).appendTo($container)
                $("<div>", {"class" : "error-content"}).append(error.message).appendTo($container)
        else:
            $(".errorsbox").addClass("panel-default content-hidden disabled").removeClass("panel-danger")

    def tojson(self): #Renvoie la chaine json contenant toutes les caractéristiques du quiz
        json = ""
        if len(self.errors) > 0:
            utils.alert_dialog("Erreur", "Vous devez corriger les erreurs avant de pouvoir envoyer le quiz")
        elif len(self.questions) == 0:
            utils.alert_dialog("Erreur", "Votre quiz ne comporte aucune question")
        else:
            object_json = [] #Objet destiné à être converti en json
            for question in self.questions:
                object_json.append(question.properties()) #Ajout des propriétés de chaque question
            json = JSON.stringify(object_json)
        return json

    #Méthodes de générations de chaines uniques

    def get_id(self): #Génère un id unique
        self.id += 1
        return "id_" + self.id

    def get_name(self): #Génère un name unique
        self.name += 1
        return "name_" + self.name

def start_render(): #Affiche l'aperçu
    code = $("#quizcode").val()
    parse = Parse(code).render()
    PR.prettyPrint() # Rafraichir le rendu prettify.js
    MathJax.Hub.Queue(["Typeset",MathJax.Hub]) # Rafraîchit le rendu mathjax

def submit(event): #Soumet les données au serveur
    parse = Parse($("#quizcode").val())

    # c'est ici pour le moment que l'on recherche les tags
    tags = $('#tags-input').tagsinput('items')
    tags_json = JSON.stringify(tags)

    json_string = parse.tojson()
    title = $("#title").val()
    if json_string: # Contrôle qu'il y ait au moins une question
        if title: # Vérifie le titre
            $("#quiz_json").val(json_string) #On ajoute le json dans un champ de formulaire caché
            $("#tags").val(tags_json) #On ajoute le json dans un champ de formulaire caché

            $("#createform").submit() #Le formulaire est soumis
        else:
            utils.alert_dialog("Erreur", "Vous devez spécifier un titre pour votre quiz")
    else:
        parse.render()

def sort_by_line(a, b): # Fonction qui définit les critères de tri des erreurs pour .sort() (JS)
    if a["line"] < b["line"]:
        return -1
    else:
        return 1



def demo(): #Permet d'insérer un exemple de format texte
    demo_text = "{++} Cases à cocher\
\n{*} Option 1\
\n{=} Option 4\
\n{=} Option 5\
\n\
\n\
\n{??} Question simple\
\n{=} Réponse\
\n\
\n{**} Boutons radio\
\n{*} Option 1\
\n{=} Option 2"
    $("#quizcode").val(demo_text)
    show_lines()

def prevent_submit(event):
    # Désactivation de l'envoi du formulaire avec la touche Enter
    if event.which == 13:
        event.preventDefault()

def main(): #Chaque bouton est lié à une méthode
    $("#start-render").click(start_render)
    $("#demo").click(demo)
    $("#submit").click(submit)
    $("#title").keypress(prevent_submit)

jQuery(document).ready(main)
